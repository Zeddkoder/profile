// Script pour construire l'application en local
// Ex√©cuter avec: node local-build.js
import { execSync } from 'child_process';
import { existsSync, mkdirSync, writeFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { loadEnv } from './server/loadEnv.mjs';

// Charger les variables d'environnement depuis .env
loadEnv();

// Obtenir le chemin du r√©pertoire actuel
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// D√©finir l'environnement de production
process.env.NODE_ENV = 'production';

console.log('üöÄ D√©but de la construction...');

try {
  // Cr√©er le dossier dist s'il n'existe pas
  const distDir = join(__dirname, 'dist');
  if (!existsSync(distDir)) {
    mkdirSync(distDir, { recursive: true });
  }
  
  // V√©rifier que les d√©pendances sont install√©es
  console.log('üìã V√©rification des d√©pendances...');
  if (!existsSync(join(__dirname, 'node_modules'))) {
    console.log('üì¶ Installation des d√©pendances...');
    execSync('npm install', { stdio: 'inherit' });
  }
  
  console.log('üì¶ Construction du frontend...');
  execSync('npx vite build', { stdio: 'inherit' });
  
  console.log('üì¶ Construction du backend...');
  execSync('npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist', { stdio: 'inherit' });
  
  // Cr√©er un fichier d'entr√©e sur mesure pour faciliter l'importation en ESM
  console.log('üìù Cr√©ation du fichier d\'entr√©e...');
  const entryContent = "// Fichier d'entr√©e g√©n√©r√© automatiquement\nexport * from './index.js';\n";
  writeFileSync(join(distDir, 'entry.js'), entryContent);
  
  console.log('‚úÖ Construction termin√©e avec succ√®s!');
  console.log('');
  console.log('Pour d√©marrer l\'application en production, ex√©cutez:');
  console.log('node local-start-prod.js');
} catch (error) {
  console.error('‚ùå Erreur pendant la construction:', error);
  console.error(error.stack || error);
  
  if (error.message && error.message.includes('command not found') && error.message.includes('npx')) {
    console.log('\nüí° Il semble que npx ne soit pas disponible. Installez Node.js (version 14 ou sup√©rieure) pour utiliser npx.');
  }
  
  process.exit(1);
}